const { WELCOME_MESSAGE, HELP_MESSAGE } = require('../config');
const { isValidUrl, getPlatform } = require('../utils/validators');
const { downloadVideo } = require('../services/downloader');
const logger = require('winston');

const startCommand = async (msg) => {
  try {
    const user = msg.from;
    const bot = global.bot;

    // Try to log to channel
    try {
      await bot.sendMessage(
        process.env.LOG_CHANNEL_ID,
        `üë§ New user started bot: ${user.username || user.id}`
      );
    } catch (e) {
      logger.warn(`Could not send log message: ${e.message}`);
    }

    await bot.sendMessage(msg.chat.id, WELCOME_MESSAGE);
  } catch (e) {
    logger.error(`Error in start command: ${e.message}`);
    await bot.sendMessage(msg.chat.id, "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
  }
};

const helpCommand = async (msg) => {
  try {
    const user = msg.from;
    const bot = global.bot;

    // Try to log to channel
    try {
      await bot.sendMessage(
        process.env.LOG_CHANNEL_ID,
        `‚ÑπÔ∏è Help command used by: ${user.username || user.id}`
      );
    } catch (e) {
      logger.warn(`Could not send log message: ${e.message}`);
    }

    await bot.sendMessage(msg.chat.id, HELP_MESSAGE);
  } catch (e) {
    logger.error(`Error in help command: ${e.message}`);
    await bot.sendMessage(msg.chat.id, "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
  }
};

const platformsCommand = async (msg) => {
  try {
    const keyboard = {
      inline_keyboard: [
        [
          { text: "YouTube ‡∂Ø‡∂≠‡∑ä‡∂≠ üìä", callback_data: "platform_stats_youtube" },
          { text: "TikTok ‡∂Ø‡∂≠‡∑ä‡∂≠ üìä", callback_data: "platform_stats_tiktok" }
        ],
        [
          { text: "Instagram ‡∂Ø‡∂≠‡∑ä‡∂≠ üìä", callback_data: "platform_stats_instagram" },
          { text: "Facebook ‡∂Ø‡∂≠‡∑ä‡∂≠ üìä", callback_data: "platform_stats_facebook" }
        ],
        [{ text: "Dailymotion ‡∂Ø‡∂≠‡∑ä‡∂≠ üìä", callback_data: "platform_stats_dailymotion" }],
        [{ text: "Playlist ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫ üìÇ", callback_data: "manage_playlists" }],
        [{ text: "‡∂Ω‡∑ö‡∂õ‡∂± ‡∂∂‡∂Ω‡∂±‡∑ä‡∂± üìÑ", callback_data: "view_documents" }]
      ]
    };

    await bot.sendMessage(
      msg.chat.id,
      "‡∂¥‡∑Ñ‡∂≠ ‡∂ï‡∂±‡∑ë‡∂∏ platform ‡∂ë‡∂ö‡∂ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ù playlist ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
      { reply_markup: keyboard }
    );
  } catch (e) {
    logger.error(`Error in platforms command: ${e.message}`);
    await bot.sendMessage(msg.chat.id, "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
  }
};

const handleMessage = async (msg, bot) => {
  const url = msg.text.trim();
  const user = msg.from;

  try {
    // Log URL receipt
    try {
      await bot.sendMessage(
        process.env.LOG_CHANNEL_ID,
        `üîó URL received from ${user.username || user.id}:\n${url}`
      );
    } catch (e) {
      logger.warn(`Could not send log message: ${e.message}`);
    }

    // Validate URL
    if (!isValidUrl(url)) {
      await bot.sendMessage(
        msg.chat.id,
        "‚ùå ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑í URL ‡∂ë‡∂ö ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ê‡∂≠.\n" +
        "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î video URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.\n\n" +
        "‡∑É‡∑Ñ‡∑è‡∂∫ ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂± platforms:\n" +
        "‚Ä¢ YouTube\n" +
        "‚Ä¢ Facebook\n" +
        "‚Ä¢ Instagram\n" +
        "‚Ä¢ TikTok\n" +
        "‚Ä¢ Dailymotion"
      );
      return;
    }

    // Create platform selection keyboard
    const keyboard = {
      inline_keyboard: [
        [
          { text: "YouTube ‚ñ¢", callback_data: "platform_youtube" },
          { text: "TikTok ‚ñ¢", callback_data: "platform_tiktok" }
        ],
        [
          { text: "Instagram ‚ñ¢", callback_data: "platform_instagram" },
          { text: "Facebook ‚ñ¢", callback_data: "platform_facebook" }
        ],
        [{ text: "Dailymotion ‚ñ¢", callback_data: "platform_dailymotion" }],
        [{ text: "‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂∫‡∂±‡∑ä‡∂± ‚ûú", callback_data: "platforms_selected" }],
        [{ text: "Caption ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂± üìù", callback_data: "add_caption" }],
        [{ text: "Playlist ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂± üìÇ", callback_data: "select_playlist" }]
      ]
    };

    // Store URL in context
    global.userContexts = global.userContexts || {};
    global.userContexts[msg.chat.id] = {
      currentUrl: url,
      selectedPlatforms: new Set()
    };

    // Show platform selection message
    await bot.sendMessage(
      msg.chat.id,
      "‚úÖ URL ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂á‡∂≠!\n\n" +
      "Upload ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß platform ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:\n" +
      "(‡∂î‡∂∂‡∂ß platforms ‡∂ö‡∑í‡∑Ñ‡∑í‡∂¥‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö)",
      { reply_markup: keyboard }
    );

  } catch (e) {
    logger.error(`Error processing URL: ${e.message}`, e);
    await bot.sendMessage(
      msg.chat.id,
      "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
    );
  }
};

module.exports = {
  startCommand,
  helpCommand,
  platformsCommand,
  handleMessage
};